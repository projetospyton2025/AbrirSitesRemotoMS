
 
 
 
 
 
 
 Diretório: J:\Meu Drive\ProjetosPython\Loterias\AbrirSitesLocais


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        25/02/2025     06:35                requisitos
d-----        10/02/2025     10:12                venv
d-----        10/02/2025     11:40                templates
d-----        10/02/2025     19:51                static
------        10/02/2025     09:55           1096 LICENSE
------        10/02/2025     09:55             51 README.md
------        24/02/2025     18:35             56 requirements.txt
------        10/02/2025     20:03           3866 app.py

from flask import Flask, render_template, jsonify
import os
import time
import webbrowser

app = Flask(__name__)

# Detectando o ambiente
# No Render, a variável de ambiente RENDER estará definida
IS_CLOUD = os.environ.get('RENDER') is not None or os.environ.get('PORT') == '10000'

# Configuração do navegador (apenas para ambiente local)
if not IS_CLOUD:
    FIREFOX_PATH = r"C:\Program Files\Firefox Developer Edition\firefox.exe"
    EDGE_PATH = r"C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe"
    
    # Verifica se o Firefox Developer está instalado
    if os.path.exists(FIREFOX_PATH):
        webbrowser.register('browser', None, webbrowser.BackgroundBrowser(FIREFOX_PATH))
        BROWSER_NAME = "Firefox Developer Edition"
    else:
        # Se não estiver, usa o Edge
        webbrowser.register('browser', None, webbrowser.BackgroundBrowser(EDGE_PATH))
        BROWSER_NAME = "Microsoft Edge"
else:
    BROWSER_NAME = "Navegador Web"

# Lista de sites externos para abrir
SITES = [
    {
        'name': 'Portifólio do Maia',
        'url': 'https://portifoliodomaia.netlify.app/'
    },
    {
        'name': 'Loterias Caixa',
        'url': 'https://loteriascaixa.netlify.app/'
    },
    {
        'name': 'Estratégias para Mega Sena',
        'url': 'https://estrategiasparamegasena.netlify.app/'
    },
    {
        'name': 'Estatísticas | Resumo',
        'url': 'https://resumomegasena.onrender.com/'
    },
    {
        'name': 'Geradores | Combinação I',
        'url': 'https://combinacao-i.onrender.com/'
    },
    {
        'name': 'Estratégias | Palpites I',
        'url': 'https://palpitesmegasena.onrender.com/'
    },
    {
        'name': 'Estratégias | Palpites II',
        'url': 'https://palpitesms.onrender.com/'
    },
    {
        'name': 'Estratégias | Colunas',
        'url': 'https://colunas.onrender.com/'
    },
    {
        'name': 'Estratégias | Quadrantes',
        'url': 'https://estrategiasparamegasena.netlify.app/historicoderesultados/index1a'
    },
    {
        'name': 'Resultados | Todos Sorteios + filtro avançado',
        'url': 'https://estrategiasparamegasena.netlify.app/historicoderesultados/index5'
    },
    {
        'name': 'Estratégias | Palpites III',
        'url': 'https://palpitesmegas.onrender.com/'
    }
]

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/list_sites')
def list_sites():
    try:
        return jsonify({
            'sites': SITES,
            'browser_info': {
                'name': BROWSER_NAME,
                'is_cloud': IS_CLOUD
            }
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/open_site/<int:site_id>')
def open_site(site_id):
    try:
        if 0 <= site_id < len(SITES):
            site = SITES[site_id]
            
            # Em ambiente local, tenta abrir com webbrowser
            browser_opened = False
            if not IS_CLOUD:
                try:
                    webbrowser.get('browser').open(site['url'])
                    browser_opened = True
                except:
                    # Se falhar, o frontend lidará com isso
                    pass
            
            return jsonify({
                'success': True,
                'message': f'Site {site["name"]} aberto' + (f' no {BROWSER_NAME}' if browser_opened else ''),
                'url': site['url'],
                'browser_opened': browser_opened
            })
        return jsonify({
            'success': False,
            'message': 'Site não encontrado'
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'message': str(e)
        })

@app.route('/open_all_sites')
def open_all_sites():
    try:
        urls = [site['url'] for site in SITES]
        
        # Em ambiente local, tenta abrir com webbrowser
        browser_opened = False
        if not IS_CLOUD:
            try:
                # Primeiro site abre em nova janela
                webbrowser.get('browser').open(urls[0])
                
                # Pequena pausa para garantir que a primeira janela abra
                time.sleep(0.5)
                
                # Resto dos sites abrem em novas abas na mesma janela
                for url in urls[1:]:
                    webbrowser.get('browser').open_new_tab(url)
                    # Pequena pausa para evitar sobrecarga
                    time.sleep(0.3)
                    
                browser_opened = True
            except:
                # Se falhar, o frontend lidará com isso
                pass
        
        return jsonify({
            'success': True,
            'message': f'Todos os {len(SITES)} sites foram' + (f' abertos no {BROWSER_NAME}' if browser_opened else ' preparados para abrir'),
            'urls': urls,
            'browser_opened': browser_opened
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'message': str(e)
        })

if __name__ == '__main__':
    # Use a porta fornecida pelo ambiente ou 5001 como padrão
    port = int(os.environ.get('PORT', 5001))
    # No Render precisa ser 0.0.0.0
    host = '0.0.0.0'
    debug = not IS_CLOUD  # Desativa debug em produção
    app.run(host=host, port=port, debug=debug)
	
	document.addEventListener('DOMContentLoaded', async function() {
    try {
        const response = await fetch('/list_sites');
        const data = await response.json();
        
        const sitesContainer = document.getElementById('sites');
        const browserInfoElement = document.getElementById('browser-info');
        
        if (data.error) {
            sitesContainer.innerHTML = `<div class="error">${data.error}</div>`;
            return;
        }
        
        // Informações sobre o ambiente
        const isCloud = data.browser_info?.is_cloud || false;
        const browserName = data.browser_info?.name || "navegador";
        
        // Mostra informação sobre qual navegador está sendo usado
        if (data.browser_info) {
            if (isCloud) {
                browserInfoElement.innerHTML = `<strong>Modo Web</strong> - Sites abrirão no seu navegador`;
                browserInfoElement.className = 'browser-cloud';
            } else {
                browserInfoElement.innerHTML = `Usando: <strong>${browserName}</strong>`;
                browserInfoElement.className = browserName.includes('Firefox') ? 'browser-firefox' : 'browser-edge';
            }
        }

        // Adiciona botão para abrir todos os sites
        const openAllSection = document.createElement('div');
        openAllSection.className = 'open-all-section';
        openAllSection.innerHTML = `
            <p class="open-all-info">Clique no botão abaixo para abrir todos os sites ${isCloud ? 'em novas abas' : 'no ' + browserName}</p>
            <button class="open-all-button" id="openAllButton">
                Abrir Todos os Sites
            </button>
        `;
        sitesContainer.appendChild(openAllSection);

        // Handler para o botão de abrir todos
        document.getElementById('openAllButton').addEventListener('click', async function() {
            const button = this;
            const originalText = button.textContent;
            
            try {
                // Desabilita o botão e mostra loading
                button.disabled = true;
                button.textContent = 'Abrindo todos os sites...';
                
                // Chama a API para abrir todos os sites
                const response = await fetch('/open_all_sites');
                const result = await response.json();
                
                if (result.success) {
                    // Se estamos na nuvem ou se o navegador não abriu, abre via JavaScript
                    if (!result.browser_opened && result.urls) {
                        // Abre o primeiro site em uma nova janela
                        const firstWindow = window.open(result.urls[0], '_blank');
                        
                        // Se o bloqueador de pop-ups impediu a abertura
                        if (!firstWindow || firstWindow.closed || typeof firstWindow.closed === 'undefined') {
                            alert('Por favor, permita pop-ups para este site para abrir todos os links.');
                            // Tenta abrir só o primeiro site
                            window.open(result.urls[0], '_blank');
                        } else {
                            // Espera um pouco e abre os outros sites
                            setTimeout(() => {
                                // Abre os outros sites em novas abas
                                for (let i = 1; i < result.urls.length; i++) {
                                    window.open(result.urls[i], '_blank');
                                }
                            }, 500);
                        }
                    }
                    
                    button.textContent = 'Sites abertos!';
                    // Aguarda um pouco antes de restaurar o texto original
                    await new Promise(resolve => setTimeout(resolve, 2000));
                } else {
                    alert(`Erro: ${result.message}`);
                }
            } catch (error) {
                alert('Erro ao abrir os sites');
                console.error(error);
            } finally {
                // Restaura o botão ao estado original
                button.disabled = false;
                button.textContent = originalText;
            }
        });

        // Adiciona os sites
        const sitesGrid = document.createElement('div');
        sitesGrid.className = 'sites-grid';
        
        if (data.sites) {
            data.sites.forEach((site, index) => {
                const siteDiv = document.createElement('div');
                siteDiv.className = 'site';
                siteDiv.innerHTML = `
                    <div class="site-info">
                        <span class="site-name">${site.name}</span>
                        <span class="site-url">${site.url}</span>
                    </div>
                    <button class="open-button" onclick="openSite(${index}, '${site.url}')" data-url="${site.url}">
                        Abrir Site
                    </button>
                `;
                sitesGrid.appendChild(siteDiv);
            });
        }
        
        sitesContainer.appendChild(sitesGrid);
    } catch (error) {
        console.error('Error:', error);
        document.getElementById('sites').innerHTML = 
            `<div class="error">Erro ao carregar sites</div>`;
    }
});

async function openSite(siteId, fallbackUrl) {
    const button = event.target;
    const originalText = button.textContent;
    
    try {
        // Desabilita o botão e mostra loading
        button.disabled = true;
        button.textContent = 'Abrindo...';
        
        // Chama a API para tentar abrir o site via backend
        const response = await fetch(`/open_site/${siteId}`);
        const result = await response.json();
        
        if (result.success) {
            // Se o backend não conseguiu abrir o navegador, abrimos via JavaScript
            if (!result.browser_opened) {
                window.open(result.url, '_blank');
            }
        } else {
            // Se houve um erro na API, usamos o fallback
            if (fallbackUrl) {
                window.open(fallbackUrl, '_blank');
            } else {
                alert(`Erro: ${result.message}`);
            }
        }
    } catch (error) {
        // Em caso de erro, tentamos o fallback
        if (fallbackUrl) {
            window.open(fallbackUrl, '_blank');
        } else {
            alert('Erro ao abrir o site');
            console.error(error);
        }
    } finally {
        // Restaura o botão ao estado original
        button.disabled = false;
        button.textContent = originalText;
    }
}

flask==3.0.0
gunicorn==20.1.0

<!DOCTYPE html>
<html>
<head>
    <title>Sites de Loterias</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
</head>
<body>
    <div class="container">
        <h1>Sites de Loterias</h1>
        <div id="browser-info" class="browser-info"></div>
        
        <section>
            <div id="sites" class="sites-container"></div>
        </section>
    </div>
    <script src="{{ url_for('static', filename='script.js') }}"></script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
    <title>Redirecionando para {{ site.name }}</title>
    <meta charset="UTF-8">
    <meta http-equiv="refresh" content="2;url={{ site.url }}">
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f0f2f5;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        .redirect-container {
            text-align: center;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0,0,0,0.1);
            max-width: 80%;
        }
        h1 {
            color: #0066cc;
            margin-bottom: 20px;
        }
        .progress {
            height: 4px;
            background-color: #eee;
            margin: 20px 0;
            border-radius: 2px;
            overflow: hidden;
        }
        .progress-bar {
            height: 100%;
            width: 0%;
            background-color: #0066cc;
            animation: progress 2s linear;
        }
        @keyframes progress {
            from { width: 0%; }
            to { width: 100%; }
        }
        .url {
            color: #666;
            margin-bottom: 20px;
            word-break: break-all;
        }
        .manual-link {
            display: inline-block;
            margin-top: 10px;
            color: #0066cc;
            text-decoration: none;
        }
        .manual-link:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="redirect-container">
        <h1>Redirecionando para {{ site.name }}</h1>
        <div class="url">{{ site.url }}</div>
        <div class="progress">
            <div class="progress-bar"></div>
        </div>
        <p>Você será redirecionado automaticamente em 2 segundos.</p>
        <a href="{{ site.url }}" class="manual-link">Clique aqui se não for redirecionado automaticamente</a>
    </div>
</body>
</html>

:root {
    --primary-color: #0066cc;
    --success-color: #28a745;
    --success-hover: #218838;
    --bg-light: #f8f9fa;
    --text-color: #333;
    --error-color: #dc3545;
    --error-bg: #f8d7da;
    --firefox-color: #ff9400;
    --edge-color: #0078d7;
    --cloud-color: #6610f2;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f0f2f5;
    color: var(--text-color);
}

.container {
    max-width: 1200px;
    margin: 20px auto;
    padding: 25px;
    background: white;
    border-radius: 10px;
    box-shadow: 0 4px 10px rgba(0,0,0,0.1);
}

h1 {
    text-align: center;
    color: var(--primary-color);
    margin-bottom: 30px;
    padding-bottom: 10px;
    border-bottom: 2px solid #eee;
}

.browser-info {
    text-align: center;
    padding: 5px 10px;
    margin: -20px auto 20px;
    border-radius: 4px;
    font-size: 14px;
    width: fit-content;
}

.browser-firefox {
    background-color: rgba(255, 148, 0, 0.1);
    color: var(--firefox-color);
    border: 1px solid var(--firefox-color);
}

.browser-edge {
    background-color: rgba(0, 120, 215, 0.1);
    color: var(--edge-color);
    border: 1px solid var(--edge-color);
}

.browser-cloud {
    background-color: rgba(102, 16, 242, 0.1);
    color: var(--cloud-color);
    border: 1px solid var(--cloud-color);
}

section {
    margin-bottom: 30px;
}

/* Estilos para o grid de sites */
.sites-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

/* Estilos para os sites */
.site {
    display: flex;
    flex-direction: column;
    padding: 15px;
    background: var(--bg-light);
    border-radius: 8px;
    border-left: 4px solid #ff9800;
    transition: transform 0.2s, box-shadow 0.3s;
    height: 100%;
}

.site:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
}

.site-info {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    margin-bottom: 15px;
}

.site-name {
    font-size: 18px;
    font-weight: 600;
    margin-bottom: 8px;
}

.site-url {
    font-size: 12px;
    color: #666;
    word-break: break-all;
}

.open-button {
    background: #ff9800;
    color: white;
    border: none;
    padding: 10px 16px;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.3s;
    text-align: center;
    text-decoration: none;
    font-weight: 500;
    margin-top: auto;
}

.open-button:hover {
    background: #e68a00;
    transform: scale(1.05);
}

.open-all-section {
    text-align: center;
    margin-bottom: 30px;
    padding: 20px;
    background-color: rgba(0, 102, 204, 0.05);
    border-radius: 8px;
    border: 1px solid rgba(0, 102, 204, 0.2);
}

.open-all-info {
    margin-bottom: 15px;
    color: #555;
}

.open-all-button {
    background: #ff5722;
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 4px;
    cursor: pointer;
    font-weight: bold;
    font-size: 16px;
    transition: all 0.3s;
}

.open-all-button:hover {
    background: #e64a19;
    transform: scale(1.05);
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
}

.error {
    color: var(--error-color);
    padding: 15px;
    background: var(--error-bg);
    border-radius: 4px;
    margin: 10px 0;
    text-align: center;
}

/* Responsividade */
@media (max-width: 768px) {
    .sites-grid {
        grid-template-columns: 1fr;
    }
    
    .container {
        padding: 15px;
        margin: 10px;
    }
}